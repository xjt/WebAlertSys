<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAIAAAAEAAAABMAAAATAAAAEwAAABMAAAATAAAAEwAA
        ABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAASAAAADQAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAJwYGBnEMDAyaDw8PphEREagUFBSoFhYWqBkZ
        GagbGxuoHR0dqB8fH6ggICCoICAgqCEhIagiIiKoIiIiqCEhIaghISGoICAgqB8fH6geHh6oHBwcqBkZ
        GaITExOLCQkJTAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAQICAjIMDAywExMT9hYWFv8aGhr/Hh4e/yIi
        Iv8mJib/Kioq/y0tLf8xMTH/MzMz/zU1Nf82Njb/NjY2/zc3N/82Njb/NjY2/zQ0NP8zMzP/MTEx/y4u
        Lv8rKyv/Jycn/yIiIv0bGxvfDQ0NbwAAAA4FBQUAAAAAAAEBAQAAAAAbDAwMpREREf4ODg7/EhIS/xYW
        Fv8aGhr/Hx8f/yUlJf8rKyv/MDAw/zQ0NP84ODj/Ojo6/zs7O/88PDz/PDw8/zs7O/85OTn/NjY2/zMz
        M/8vLy//Kysr/ycnJ/8jIyP/Hh4e/xwcHP8ZGRnlCAgIVAAAAAQBAQEAGhoaAAQEBFkQEBDxDAwM/w4O
        Dv8QEBD/EhIS/xQUFP8XFxf/Gxsb/x0dHf8gICD/IiIi/yUlJf8mJib/Jycn/ygoKP8pKSn/KSkp/ykp
        Kf8oKCj/Jycn/yYmJv8jIyP/ISEh/x4eHv8dHR3/GBgY/xkZGf8RERG1AAAAFQUFBQBISEgACAgIfxAQ
        EP8LCwv/Dg4O/w8PD/8RERH/FBMT/xcWFv8aGhr/Hh0d/yAgIP8iIiL/JCQk/ycmJv8oKCj/KSkp/ykp
        Kf8pKSn/KSkp/ykoKP8nJyf/JSUl/yMiIv8hICD/Hh4e/xsbG/8YGBj/FRUV/xYWFtwCAgIjBgYGAFBQ
        UAAJCQmKEBAQ/wsLDP8NDw7/DhQT/w4XFv8QGhj/Ex0c/xYhIP8ZIyL/GyUk/x0nJv8fKSj/Iisq/yQt
        LP8kLi3/JS4t/yUuLf8kLi3/JC0s/yIsK/8fKyr/Higm/xwlJP8aIiH/GR0c/xcXF/8VFRX/FhYW5gIC
        AicGBgYAUlJSAAoKCosQEBD/CwsL/wwNDf8OEA//EBIS/xIUFP8UGhn/FSIh/xwfHv8eISH/ICMj/yMm
        Jv8lKCj/Jyop/ygrK/8pLCv/KSwr/ykrK/8oKyr/JCsq/x8sK/8hJCP/HiEh/xweHv8ZGhr/FhYW/xQU
        FP8WFhbnAgICKAYGBgBSUlIACgoKixAQEP8LCwv/DA0N/w4QEP8QExP/EhUV/xMbGv8VIyL/Gx4e/x4i
        If8gJCP/Iycm/yUpKf8nKir/KCws/yksLP8pLCz/KSws/ycrK/8kLCv/Hy0s/yEkJP8eIiH/HB8e/xga
        Gv8WFhb/ExMT/xYWFucCAgIoBgYGAFJSUgAKCgqLEBAQ/wsLC/8MDg7/DRUT/w4ZF/8QGxr/EiAf/xMo
        Jf8YJCL/GiYl/x0pKP8gLCr/Ii4s/yQvLv8lMC//JTAv/yUxMP8lMC//JDAv/yIwL/8dMi//Hiko/xsm
        Jf8YIiH/Fx0c/xUWFv8TExP/FhYW5wICAigGBgYAU1NTAAoKCosRERH/CwsL/w0NDf8ODg7/EBAQ/xMS
        Ev8UGBf/FSIg/xwbG/8fHh7/IiEi/yUlJf8nJif/KSkp/ysqKv8sKyv/Kysr/ysqK/8qKSn/Jiop/yEu
        LP8jIiL/IB8f/xwcHP8YGBj/FRUV/xMTE/8WFhbnAgICKAYGBgBXV1cACgoKixEREf8LCwv/DhAP/w4X
        Ff8OGxn/EB0c/xIiIP8TKSf/GCUk/xsoJv8eKyn/IC0s/yEvLv8iMC//JTIx/yYzMf8mMzL/JjMx/yUy
        MP8iMjD/HjQy/x4rKf8cKCf/GSQj/xYcHP8UFRX/ExMT/xYWFucCAgIoBgYGAFhZWAALCwuLERER/xgS
        Df9qQBr/bEMc/xsZE/8RFRX/Exsb/xQlJP8bHh7/HiIi/yAlJP8lKCf/Rjkp/15FKv88Niz/Ki4u/you
        Lv8qLi7/KS0t/yYuLf8fMS//ISUk/x8iIv8bHx7/GRoZ/xYWFf8TExP/FhYW5wICAigGBgYAXFxcAAsL
        C4sPEBL/Wjga/75yLv+8cC3/RjAZ/xAVFf8UHRz/FCcl/x0fHf8fIiH/ICYm/007KP+6czL/w3g1/45d
        L/8vMjD/KzEw/yswMP8qLi7/Ji8u/x8yMP8hJSX/HSIi/ysmHv98TSP/cUYg/xsXFP8VFRbnAgICKAYG
        BgBdXV0ADAwMixAREv9SNRr/TzUb/4ZVKP+TYi//Hycf/xEkI/8vPS//h2c4/3FeOP9MSzj/soBB/59z
        P/95YkD/wIhD/1JTQf8yQ0L/MkJA/y49PP8sPDf/WlQ4/0xELv8bKij/aU8t/712Nf+vbTL/KiAY/xQV
        FucCAgIoBgYGAGBgYAAMDAyLExMT/xEPDf8PDw7/NCQX/7FxN/91UCz/Kykj/5p4Rf/OkUz/zZJN/8mQ
        Tv+xf0b/TkU7/0tEPv+1gkj/oHZH/0ZCQP9AP0D/Pz4+/3FaP//amlH/t39E/2JILv+2djr/Z0Um/2JC
        JP8nHxj/FRUW5wICAigGBgYAYWJhAAwMDIsTFBP/DQ0N/w8TEv8SHx7/bFs5/72MUP+Fa0X/x5ZW/11a
        Qf96bEn/qodS/1VYR/8zR0b/NkpJ/2lkTf/Kl1f/amNN/zZLSv9RVkn/wJBV/6mKVv/Bk1b/0JdV/5Jw
        Qv8jJyL/JiAa/xkXFf8XFxfnAgICKAYGBgBlZWUADQ0NixQUFP8ODg7/FxgX/xwhIf82Mij/qH5M/9ml
        ZP+Pc0z/Mzc0/zU5N/89Pjr/OkA//z5DQ/9ARkX/SEpH/6mDVv+0jVz/S0xH/4tzUv+/lV3/SFRJ/1BH
        PP9iUD3/Pzs0/yYpKf8cHBz/FRUV/xgYGOcEBAQoCAgIAGlpaQAODg6LFBQU/xQUFP8fICD/ICUk/yIo
        KP84OC//VlE+/zZJQf8xODf/NTs7/zg/Pv89REP/QUhH/0RKSf9DSkr/cGVT/9Oiav9+alL/wJVk/499
        W/82T0z/Nz09/zI5Ov8wNzb/LTEw/yYmJv8XFxf/GRkZ5wQEBCgICAgAbGxsAA4ODosVFRX/FxcX/yAl
        JP8gLy7/IjY0/yM4Nv8lPz3/KEtI/zBEQv8zSEb/OExK/ztQTv8+UlD/QFRT/0FWVP9PXVb/u5ls/9Kr
        dv/VqXP/Y2lY/zRYVP82Skj/MkZE/y9CQP8uODf/KSsq/xkZGf8ZGRnnBQUFKAkJCQBtbW0ADg4OixUV
        Ff8YGBj/IyMj/yYlJf8pKCj/LSsr/y82Nf8vRUP/OTc4/z89Pv9EQkL/R0ZG/0tKSv9NTEz/T05O/09O
        Tv90ZVb/sY5n/5B3XP9MUU3/PVRR/0JAQf88Ozv/NzY2/zMzMv8sLCz/Ghoa/xsbG+cGBgYoCgoKAG1t
        bQAODg6LFhUW/xkZGf8kKSj/IzQy/yY7Of8pPzz/LUhF/y5TT/81S0n/OlBO/z9UUv9CWFX/RVtY/0dc
        Wf9IXlv/SF5b/0heW/9KXlr/R1xY/0JdWv87YFz/PVJP/zhNSv8zSEX/Mz48/y8wL/8cHBz/HBwc5wYG
        BigLCwsAcXFxAA8PD4sWFhb/Gxob/ycoKP8nLSz/KzIx/zE3Nv8zQUD/M09M/z9GRf9ES0r/SE9O/0xS
        Uv9OVVT/UVdW/1JZWP9TWVn/U1pZ/1FYV/9QVlX/SlhW/0FdWf9FTEr/QUhH/zxCQf84Ozr/MTEx/x0d
        Hf8cHBznBwcHKAwMDAB1dXUADw8PixcXF/8bGxv/Jykp/ykvLv8uNTX/NDo6/zZEQ/82U1D/Q0pJ/0dO
        Tf9LUlL/T1dW/1NaWf9UXFv/VVxb/1VdXP9VXVv/VFxb/1NaWf9NXFr/Q2Fd/0hPTv9ES0r/PkVE/zo9
        Pf8zNDP/Hx8f/x4eHucICAgoDQ0NAG9vbwAQEBCKGBgY/x0dHf8pLi3/Kjs5/y1EQv8xSUb/Nk5M/zpU
        Uv9AV1X/RFxZ/0lgXv9NZGL/T2Zk/1FnZf9SaGb/Umlm/1FoZv9QZmT/T2Vj/0xkYv9IYl//RFxZ/0BX
        Vf87UU//OkVE/zU3Nv8gICD/Hh4e5wkJCScODg4ASEhIABAQEIQZGRn/Hh4e/ywsLP8xMDD/NjY1/zs7
        Ov9AQED/R0ZG/0xMS/9SUlL/WFdX/1taWv9dXV3/YF9f/2FgYP9hYGD/X19f/15dXf9cW1v/WllZ/1ZV
        Vv9RUFD/TEtL/0ZFRv9AQED/Nzg3/yIiIv8fHx/iCgoKJA8PDwAjIyMAEBAQZxoaGvoeHh7/LS0t/zMz
        M/85ODj/Pj4+/0RERP9KSkr/UFFQ/1ZXVv9aW1r/Xl9e/2FiYf9kZGT/ZWZl/2VlZf9jZGP/YWJh/15e
        Xv9bW1v/WFlY/1RUVP9OT07/SUlJ/0NDQ/83Nzf/JSUl/x8fH8gJCQkXEBAQABISEgAMDAwlGxsbyBwc
        HP8oKCj/NDQ0/zs7O/9AQED/R0dH/05OTv9VVVX/W1tb/19fX/9kZGT/aGho/2pqav9qamr/amtq/2lp
        af9mZmb/YmJi/15eXv9bW1v/WFhY/1FRUf9LS0v/QkJC/y4uLv8mJib3HR0dcwAAAAMQEBAABgYGAE1N
        TQATExNKHR0d3CEhIf8oKCj/Ly8v/zU1Nf87Ozv/QUFB/0hISP9MTEz/UVFR/1ZVVv9ZWVn/Wlpa/1tb
        W/9aWlr/WVlZ/1dWVv9TU1P/T09P/0xMTP9JSUn/Q0ND/zw8PP8zMzP/LCss+SQkJJwRERERGBgYAAAA
        AAAAAAAACwsLAAAAAAEWFhY8Hx8fpiQkJNMpKSngLi4u4jMzM+I4ODjiPT094kFBQeJGRkbiSUlJ4ktL
        S+JOTk3iTk5O4k1NTeJLS0viSUlJ4kZGRuJDQ0PiQEBA4j09PeI5OTniNTU13C8vL8MoKCh1GxoaEh8f
        HwAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAODg4LFhYWGhwcHB8hISEfJiYmHy0tLR8yMjIfNzc3Hz09
        PR9AQEAfQ0NDH0VFRR9FRkYfREREH0JCQh9AQEAfPDw8Hzk5OR81NTUfMTExHy0tLR8pKSkdIiIiExYW
        FgQaGhoAAAAAAAAAAAAAAAAA/////+AAAAfAAAADgAAAA4AAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAHAAAADwAAAB+AAAA8=
</value>
  </data>
</root>